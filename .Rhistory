plumber::plumb(file='C:/Users/cindy/Desktop/ClinVar_VARITY/PRCApp/VEPerform/plumber.R')$run()
shiny::runApp('C:/Users/cindy/Desktop/ClinVar_VARITY/PRCApp/VEPerform')
runApp('C:/Users/cindy/Desktop/ClinVar_VARITY/PRCApp/VEPerform')
runApp('C:/Users/cindy/Desktop/ClinVar_VARITY/PRCApp/VEPerform')
runApp('C:/Users/cindy/Desktop/ClinVar_VARITY/PRCApp/VEPerform')
plumber::plumb(file='C:/Users/cindy/Desktop/ClinVar_VARITY/PRCApp/VEPerform/plumber.R')$run()
plumb(file='C:/Users/cindy/Desktop/ClinVar_VARITY/PRCApp/VEPerform/plumber.R')$run()
plumb(file='C:/Users/cindy/Desktop/ClinVar_VARITY/PRCApp/VEPerform/plumber.R')$run()
plumb(file='C:/Users/cindy/Desktop/ClinVar_VARITY/PRCApp/VEPerform/plumber.R')$run()
plumb(file='C:/Users/cindy/Desktop/ClinVar_VARITY/PRCApp/VEPerform/plumber.R')$run()
plumb(file='C:/Users/cindy/Desktop/ClinVar_VARITY/PRCApp/VEPerform/plumber.R')$run()
plumb(file='C:/Users/cindy/Desktop/ClinVar_VARITY/PRCApp/VEPerform/plumber.R')$run()
plumb(file='C:/Users/cindy/Desktop/ClinVar_VARITY/PRCApp/VEPerform/plumber.R')$run()
plumb(file='C:/Users/cindy/Desktop/ClinVar_VARITY/PRCApp/VEPerform/plumber.R')$run()
plumb(file='C:/Users/cindy/Desktop/ClinVar_VARITY/PRCApp/VEPerform/plumber.R')$run()
plumb(file='C:/Users/cindy/Desktop/ClinVar_VARITY/PRCApp/VEPerform/plumber.R')$run()
plumb(file='C:/Users/cindy/Desktop/ClinVar_VARITY/PRCApp/VEPerform/plumber.R')$run()
plumb(file='C:/Users/cindy/Desktop/ClinVar_VARITY/PRCApp/VEPerform/plumber.R')$run()
plumb(file='C:/Users/cindy/Desktop/ClinVar_VARITY/PRCApp/VEPerform/plumber.R')$run()
shiny::runApp('C:/Users/cindy/Desktop/ClinVar_VARITY/PRCApp/VEPerform')
runApp('C:/Users/cindy/Desktop/ClinVar_VARITY/PRCApp/VEPerform')
runApp('C:/Users/cindy/Desktop/ClinVar_VARITY/PRCApp/VEPerform')
runApp('C:/Users/cindy/Desktop/ClinVar_VARITY/PRCApp/VEPerform')
library(yogiroc)
remotes::install_github("cdyzh/yogiroc")
shiny::runApp('C:/Users/cindy/Desktop/ClinVar_VARITY/PRCApp/VEPerform')
runApp('C:/Users/cindy/Desktop/ClinVar_VARITY/PRCApp/VEPerform')
runApp('C:/Users/cindy/Desktop/ClinVar_VARITY/PRCApp/VEPerform')
runApp('C:/Users/cindy/Desktop/ClinVar_VARITY/PRCApp/VEPerform')
runApp('C:/Users/cindy/Desktop/ClinVar_VARITY/PRCApp/VEPerform')
runApp('C:/Users/cindy/Desktop/ClinVar_VARITY/PRCApp/VEPerform')
runApp('C:/Users/cindy/Desktop/ClinVar_VARITY/PRCApp/VEPerform')
# Save the preprocessed data to a new CSV file
write_csv(prcdata, "C:/Users/cindy/OneDrive/Desktop/ClinVar_VARITY/PRCApp/VEPerform/preprocessed_id_revstat.csv")
library(dplyr)
library(readr)
prcdata <- prcdata %>%
select(base__hugo, base__achange, gnomad__af, varity_r__varity_r, revel__score, alphamissense__am_pathogenicity, classification, RevStat) %>%
mutate(classification = ifelse(classification == "Pathogenic", FALSE, ifelse(classification == "Benign", TRUE, NA))) %>%
filter(!is.na(classification)) %>%
filter(!(is.na(varity_r__varity_r) & is.na(revel__score) & is.na(alphamissense__am_pathogenicity))) %>%
distinct() %>%
mutate(Stars = case_when(
RevStat %in% c("criteria_provided,_single_submitter", "criteria_provided,_conflicting_classifications") ~ 1,
RevStat == "criteria_provided,_multiple_submitters,_no_conflicts" ~ 2,
RevStat == "reviewed_by_expert_panel" ~ 3,
RevStat == "practice_guideline" ~ 4
TRUE ~ 0
prcdata <- prcdata %>%
select(base__hugo, base__achange, gnomad__af, varity_r__varity_r, revel__score, alphamissense__am_pathogenicity, classification, RevStat) %>%
mutate(classification = ifelse(classification == "Pathogenic", FALSE, ifelse(classification == "Benign", TRUE, NA))) %>%
filter(!is.na(classification)) %>%
filter(!(is.na(varity_r__varity_r) & is.na(revel__score) & is.na(alphamissense__am_pathogenicity))) %>%
distinct() %>%
mutate(Stars = case_when(
RevStat %in% c("criteria_provided,_single_submitter", "criteria_provided,_conflicting_classifications") ~ 1,
RevStat == "criteria_provided,_multiple_submitters,_no_conflicts" ~ 2,
RevStat == "reviewed_by_expert_panel" ~ 3,
RevStat == "practice_guideline" ~ 4,
TRUE ~ 0
))
prcdata <- prcdata %>%
select(base__hugo, base__achange, gnomad__af, varity_r__varity_r, revel__score, alphamissense__am_pathogenicity, classification, RevStat) %>%
mutate(classification = ifelse(classification == "Pathogenic", FALSE, ifelse(classification == "Benign", TRUE, NA))) %>%
filter(!is.na(classification)) %>%
filter(!(is.na(varity_r__varity_r) & is.na(revel__score) & is.na(alphamissense__am_pathogenicity))) %>%
distinct() %>%
mutate(Stars = case_when(
RevStat %in% c("criteria_provided,_single_submitter", "criteria_provided,_conflicting_classifications") ~ 1,
RevStat == "criteria_provided,_multiple_submitters,_no_conflicts" ~ 2,
RevStat == "reviewed_by_expert_panel" ~ 3,
RevStat == "practice_guideline" ~ 4,
TRUE ~ 0
))
q()
# Save the preprocessed data to a new CSV file
write_csv(prcdata, "C:/Users/cindy/OneDrive/Desktop/ClinVar_VARITY/PRCApp/VEPerform/preprocessed_id_revstat.csv")
library(dplyr)
library(readr)
# Read the large CSV file
prcdata <- read_csv("C:/Users/cindy/OneDrive/Desktop/ClinVar_VARITY/cPos_Full_July_2024/full_gene_id_revstat.csv")
# Save the preprocessed data to a new CSV file
write_csv(prcdata, "C:/Users/cindy/Desktop/ClinVar_VARITY/PRCApp/VEPerform/preprocessed_id_revstat.csv")
# Read the large CSV file
prcdata <- read_csv("C:/Users/cindy/Desktop/ClinVar_VARITY/cPos_Full_July_2024/full_gene_id_revstat.csv")
prcdata <- prcdata %>%
select(base__hugo, base__achange, gnomad__af, varity_r__varity_r, revel__score, alphamissense__am_pathogenicity, classification, RevStat) %>%
mutate(classification = ifelse(classification == "Pathogenic", FALSE, ifelse(classification == "Benign", TRUE, NA))) %>%
filter(!is.na(classification)) %>%
filter(!(is.na(varity_r__varity_r) & is.na(revel__score) & is.na(alphamissense__am_pathogenicity))) %>%
distinct() %>%
mutate(Stars = case_when(
RevStat %in% c("criteria_provided,_single_submitter", "criteria_provided,_conflicting_classifications") ~ 1,
RevStat == "criteria_provided,_multiple_submitters,_no_conflicts" ~ 2,
RevStat == "reviewed_by_expert_panel" ~ 3,
RevStat == "practice_guideline" ~ 4,
TRUE ~ 0
))
# Save the preprocessed data to a new CSV file
write_csv(prcdata, "C:/Users/cindy/Desktop/ClinVar_VARITY/PRCApp/VEPerform/preprocessed_id_revstat.csv")
shiny::runApp('C:/Users/cindy/Desktop/ClinVar_VARITY/PRCApp/VEPerform')
runApp('C:/Users/cindy/Desktop/ClinVar_VARITY/PRCApp/VEPerform')
runApp('C:/Users/cindy/Desktop/ClinVar_VARITY/PRCApp/VEPerform')
runApp('C:/Users/cindy/Desktop/ClinVar_VARITY/PRCApp/VEPerform')
runApp('C:/Users/cindy/Desktop/ClinVar_VARITY/PRCApp/VEPerform')
runApp('C:/Users/cindy/Desktop/ClinVar_VARITY/PRCApp/VEPerform')
runApp('C:/Users/cindy/Desktop/ClinVar_VARITY/PRCApp/VEPerform')
runApp('C:/Users/cindy/Desktop/ClinVar_VARITY/PRCApp/VEPerform')
runApp('C:/Users/cindy/Desktop/ClinVar_VARITY/PRCApp/VEPerform')
runApp('C:/Users/cindy/Desktop/ClinVar_VARITY/PRCApp/VEPerform')
runApp('C:/Users/cindy/Desktop/ClinVar_VARITY/PRCApp/VEPerform')
runApp('C:/Users/cindy/Desktop/ClinVar_VARITY/PRCApp/VEPerform')
shiny::runApp('C:/Users/cindy/Desktop/ClinVar_VARITY/PRCApp/VEPerform')
runApp('C:/Users/cindy/Desktop/ClinVar_VARITY/PRCApp/VEPerform')
runApp('C:/Users/cindy/Desktop/ClinVar_VARITY/PRCApp/VEPerform')
shiny::runApp('C:/Users/cindy/Desktop/ClinVar_VARITY/PRCApp/VEPerform')
runApp('C:/Users/cindy/Desktop/ClinVar_VARITY/PRCApp/VEPerform')
